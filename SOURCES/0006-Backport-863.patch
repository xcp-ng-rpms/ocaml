From 79ce8fcefeee2dc0e63d5da2b6a99b25d355fa3a Mon Sep 17 00:00:00 2001
From: Stephen Dolan <mu@netsoc.tcd.ie>
Date: Fri, 9 Dec 2016 15:01:06 +0000
Subject: [PATCH 1/2] Use a lookup table for matches with constant results.
 (#863)

Signed-off-by: Marcello Seri <marcello.seri@citrix.com>
---
 asmcomp/cmmgen.ml | 40 +++++++++++++++++++++++++++++++++++-----
 1 file changed, 35 insertions(+), 5 deletions(-)

diff --git a/asmcomp/cmmgen.ml b/asmcomp/cmmgen.ml
index fd21651f0..4db151e7b 100644
--- a/asmcomp/cmmgen.ml
+++ b/asmcomp/cmmgen.ml
@@ -1238,6 +1238,34 @@ let transl_isout h arg = tag_int (Cop(Ccmpa Clt, [h ; arg]))
 
 (* Build an actual switch (ie jump table) *)
 
+let make_switch arg cases actions dbg =
+  let is_const = function
+    | Cconst_int n
+    | Cconst_pointer n -> (n land 1) = 1
+    | Cconst_natint _
+    | Cconst_float _
+    | Cconst_symbol _ -> true
+    | _ -> false in
+  if Array.for_all is_const actions then
+    let const c =
+      let sym = Compilenv.new_structured_constant ~shared:true c in
+      Uconst_ref(sym, Some c) in
+    let to_uconst = function
+      | Cconst_int n -> Uconst_int (n lsr 1)
+      | Cconst_pointer n -> Uconst_ptr (n lsr 1)
+      | Cconst_symbol s -> Uconst_ref (s, None)
+      | Cconst_natint n -> const (Uconst_nativeint n)
+      | Cconst_float f -> const (Uconst_float f)
+      | _ -> assert false in
+    let const_actions = Array.map to_uconst actions in
+    let table = Compilenv.new_structured_constant ~shared:true
+      (Uconst_block (0,
+        Array.to_list (Array.map (fun act ->
+          const_actions.(act)) cases))) in
+    addr_array_ref (Cconst_symbol table) (tag_int arg dbg) dbg
+  else
+    Cswitch (arg,cases,actions,dbg)
+
 module SArgBlocks =
 struct
   type primitive = operation
@@ -1257,7 +1285,8 @@ struct
   let make_isout h arg =  Cop (Ccmpa Clt, [h ; arg])
   let make_isin h arg =  Cop (Ccmpa Cge, [h ; arg])
   let make_if cond ifso ifnot = Cifthenelse (cond, ifso, ifnot)
-  let make_switch arg cases actions = Cswitch (arg,cases,actions)
+  let make_switch arg cases actions =
+    make_switch arg cases actions Debuginfo.none
   let bind arg body = bind "switcher" arg body
 
   let make_catch handler = match handler with
@@ -1622,10 +1651,11 @@ let rec transl env e =
       (* As in the bytecode interpreter, only matching against constants
          can be checked *)
       if Array.length s.us_index_blocks = 0 then
-        Cswitch
-          (untag_int (transl env arg),
-           s.us_index_consts,
-           Array.map (transl env) s.us_actions_consts)
+        make_switch
+          (untag_int (transl env arg))
+          s.us_index_consts
+          (Array.map (transl env) s.us_actions_consts)
+          dbg
       else if Array.length s.us_index_consts = 0 then
         transl_switch env (get_tag (transl env arg))
           s.us_index_blocks s.us_actions_blocks
-- 
2.11.0

