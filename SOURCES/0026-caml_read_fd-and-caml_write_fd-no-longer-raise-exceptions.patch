diff --git a/runtime/caml/osdeps.h b/runtime/caml/osdeps.h
index 44fba1eb9a..2ca88e4441 100644
--- a/runtime/caml/osdeps.h
+++ b/runtime/caml/osdeps.h
@@ -32,16 +32,13 @@ extern unsigned short caml_win32_revision;
 #include "misc.h"
 #include "memory.h"
 
-#define Io_interrupted (-1)
-
 /* Read at most [n] bytes from file descriptor [fd] into buffer [buf].
    [flags] indicates whether [fd] is a socket
    (bit [CHANNEL_FLAG_FROM_SOCKET] is set in this case, see [io.h]).
    (This distinction matters for Win32, but not for Unix.)
    Return number of bytes read.
-   In case of error, raises [Sys_error] or [Sys_blocked_io].
-   If interrupted by a signal and no bytes where read, returns
-   Io_interrupted without raising. */
+   In case of error, set [errno] and return -1. */   
+
 extern int caml_read_fd(int fd, int flags, void * buf, int n);
 
 /* Write at most [n] bytes from buffer [buf] onto file descriptor [fd].
@@ -49,9 +46,8 @@ extern int caml_read_fd(int fd, int flags, void * buf, int n);
    (bit [CHANNEL_FLAG_FROM_SOCKET] is set in this case, see [io.h]).
    (This distinction matters for Win32, but not for Unix.)
    Return number of bytes written.
-   In case of error, raises [Sys_error] or [Sys_blocked_io].
-   If interrupted by a signal and no bytes were written, returns
-   Io_interrupted without raising. */
+   In case of error, set [errno] and return -1. */
+
 extern int caml_write_fd(int fd, int flags, void * buf, int n);
 
 /* Decompose the given path into a list of directories, and add them
diff --git a/runtime/io.c b/runtime/io.c
index e40968ac7e..f4c8748595 100644
--- a/runtime/io.c
+++ b/runtime/io.c
@@ -193,7 +193,9 @@ CAMLexport int caml_flush_partial(struct channel *channel)
   if (towrite > 0) {
     written = caml_write_fd(channel->fd, channel->flags,
                             channel->buff, towrite);
-    if (written == Io_interrupted) goto again;
+    if (written == -1) {
+      if (errno == EINTR) goto again; else caml_sys_io_error(NO_ARG);
+    }
     channel->offset += written;
     if (written < towrite)
       memmove(channel->buff, channel->buff + written, towrite - written);
@@ -287,7 +289,7 @@ int caml_do_read(int fd, char *p, unsigned int n)
   int r;
   do {
     r = caml_read_fd(fd, 0, p, n);
-  } while (r == Io_interrupted);
+  } while (r == -1 && errno == EINTR);
   return r;
 }
 
@@ -298,8 +300,11 @@ CAMLexport unsigned char caml_refill(struct channel *channel)
   check_pending(channel);
   n = caml_read_fd(channel->fd, channel->flags,
                    channel->buff, channel->end - channel->buff);
-  if (n == Io_interrupted) goto again;
-  else if (n == 0) caml_raise_end_of_file();
+  if (n == -1) {
+    if (errno == EINTR) goto again; else caml_sys_io_error(NO_ARG);
+  } else if (n == 0) {
+    caml_raise_end_of_file();
+  }
   channel->offset += n;
   channel->max = channel->buff + n;
   channel->curr = channel->buff + 1;
@@ -348,7 +353,9 @@ CAMLexport int caml_getblock(struct channel *channel, char *p, intnat len)
   } else {
     nread = caml_read_fd(channel->fd, channel->flags, channel->buff,
                          channel->end - channel->buff);
-    if (nread == Io_interrupted) goto again;
+    if (nread == -1) {
+      if (errno == EINTR) goto again; else caml_sys_io_error(NO_ARG);
+    }
     channel->offset += nread;
     channel->max = channel->buff + nread;
     if (n > nread) n = nread;
@@ -423,7 +430,9 @@ intnat caml_input_scan_line(struct channel *channel)
       /* Fill the buffer as much as possible */
       n = caml_read_fd(channel->fd, channel->flags,
                        channel->max, channel->end - channel->max);
-      if (n == Io_interrupted) goto again;
+      if (n == -1) {
+        if (errno == EINTR) goto again; else caml_sys_io_error(NO_ARG);
+      }
       else if (n == 0) {
         /* End-of-file encountered. Return the number of characters in the
            buffer, with negative sign since we haven't encountered
@@ -826,7 +835,9 @@ CAMLprim value caml_ml_input(value vchannel, value buff, value vstart,
   } else {
     nread = caml_read_fd(channel->fd, channel->flags, channel->buff,
                          channel->end - channel->buff);
-    if (nread == Io_interrupted) goto again;
+    if (nread == -1) {
+      if (errno == EINTR) goto again; else caml_sys_io_error(NO_ARG);
+    }
     channel->offset += nread;
     channel->max = channel->buff + nread;
     if (n > nread) n = nread;
diff --git a/runtime/unix.c b/runtime/unix.c
index 21715a761e..bcbc3152f1 100644
--- a/runtime/unix.c
+++ b/runtime/unix.c
@@ -78,10 +78,6 @@ int caml_read_fd(int fd, int flags, void * buf, int n)
   caml_enter_blocking_section_no_pending();
   retcode = read(fd, buf, n);
   caml_leave_blocking_section();
-  if (retcode == -1) {
-    if (errno == EINTR) return Io_interrupted;
-    else caml_sys_io_error(NO_ARG);
-  }
   return retcode;
 }
 
@@ -93,7 +89,6 @@ int caml_write_fd(int fd, int flags, void * buf, int n)
   retcode = write(fd, buf, n);
   caml_leave_blocking_section();
   if (retcode == -1) {
-    if (errno == EINTR) return Io_interrupted;
     if ((errno == EAGAIN || errno == EWOULDBLOCK) && n > 1) {
       /* We couldn't do a partial write here, probably because
          n <= PIPE_BUF and POSIX says that writes of less than
@@ -103,8 +98,7 @@ int caml_write_fd(int fd, int flags, void * buf, int n)
       n = 1; goto again;
     }
   }
-  if (retcode == -1) caml_sys_io_error(NO_ARG);
-  CAMLassert (retcode > 0);
+  CAMLassert (retcode > 0 || retcode == -1);
   return retcode;
 }
 
diff --git a/runtime/win32.c b/runtime/win32.c
index 6ea649a8dd..18997bba51 100644
--- a/runtime/win32.c
+++ b/runtime/win32.c
@@ -94,40 +94,40 @@ static void caml_win32_sys_error(int errnum)
 int caml_read_fd(int fd, int flags, void * buf, int n)
 {
   int retcode;
+  caml_enter_blocking_section_no_pending();
   if ((flags & CHANNEL_FLAG_FROM_SOCKET) == 0) {
-    caml_enter_blocking_section_no_pending();
     retcode = read(fd, buf, n);
     /* Large reads from console can fail with ENOMEM.  Reduce requested size
        and try again. */
     if (retcode == -1 && errno == ENOMEM && n > 16384) {
       retcode = read(fd, buf, 16384);
     }
-    caml_leave_blocking_section();
-    if (retcode == -1) caml_sys_io_error(NO_ARG);
   } else {
-    caml_enter_blocking_section_no_pending();
     retcode = recv((SOCKET) _get_osfhandle(fd), buf, n, 0);
-    caml_leave_blocking_section();
-    if (retcode == -1) caml_win32_sys_error(WSAGetLastError());
+    if (retcode == -1) {
+      errno = caml_posixerr_of_win32err(WSAGetLastError());
+      if (errno == 0) errno = EINVAL;
+    }
   }
+  caml_leave_blocking_section();
   return retcode;
 }
 
 int caml_write_fd(int fd, int flags, void * buf, int n)
 {
   int retcode;
+  caml_enter_blocking_section_no_pending();
   if ((flags & CHANNEL_FLAG_FROM_SOCKET) == 0) {
-    caml_enter_blocking_section_no_pending();
     retcode = write(fd, buf, n);
-    caml_leave_blocking_section();
-    if (retcode == -1) caml_sys_io_error(NO_ARG);
   } else {
-    caml_enter_blocking_section_no_pending();
     retcode = send((SOCKET) _get_osfhandle(fd), buf, n, 0);
-    caml_leave_blocking_section();
-    if (retcode == -1) caml_win32_sys_error(WSAGetLastError());
+    if (retcode == -1) {
+      errno = caml_posixerr_of_win32err(WSAGetLastError());
+      if (errno == 0) errno = EINVAL;
+    }
   }
-  CAMLassert (retcode > 0);
+  caml_leave_blocking_section();
+  CAMLassert (retcode > 0 || retcode == -1);
   return retcode;
 }
 
